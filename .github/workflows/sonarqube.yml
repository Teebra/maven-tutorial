name: SonarQube analysis

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Get Branch and Repository Name
        id: info
        run: |
          echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
          echo "::set-output name=repository::${GITHUB_REPOSITORY}"
        shell: bash

      - name: Display Branch and Repository Name
        run: |
          echo "Current Branch: ${{ steps.info.outputs.branch }}"
          echo "Repository Name: ${{ steps.info.outputs.repository }}"

      - name: Build with Maven
        run: mvn clean install

      - name: Analyze with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args:
            -Dsonar.projectBaseDir=.
            -Dsonar.projectVersion=1.${{ github.run_number }}
            -Dsonar.sources=src/main/java
            -Dsonar.java.binaries=**classes**
            -Dsonar.exclusions=**package-info.**
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.projectKey=sonartest
            -Dsonar.projectName=sonartest 
            -Dsonar.analysis.mode=publish
            -Dsonar.dynamicAnalysis=reuseReports
      
      # - name: SonarQube Quality Gate check
      #   id: sonarqube-quality-gate-check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   # Force to fail step after specific time.
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   continue-on-error: true
      
      # - name: "Example show SonarQube Quality Gate Status value"
      #   run: |
      #     echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
      #     echo "${{ steps.quality-gate-check.outputs.project-status }}"
      #     echo "${{ steps.quality-gate-check.outputs.quality-gate-result }}"
      #     echo ${{ steps.sonarqube-quality-gate-check.outputs.report }}
      
      - name: Wait for the quality gate result
        run: sleep 5

      - name: quality gate result
        uses: phwt/sonarqube-quality-gate-action@v1
        id: quality-gate-check
        with:
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.PAT_TOKEN }}

      - name: Output result
        run: |
          echo "${{ steps.quality-gate-check.outputs.project-status }}"
          echo "${{ steps.quality-gate-check.outputs.quality-gate-result }}"
      





  #     - name: Get branch name
  #       id: branch_name
  #       run: echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"

  #     - name: Check branch name
  #       run: |
  #         branch_name=${{ steps.branch_name.outputs.branch_name }}
  #         if [[ $branch_name == release*0 ]]; then
  #           echo "fail"
  #         else
  #           echo "success"
  #         fi
  #         #ls src/bin/script.py

  # check:
  #   runs-on: ubuntu-latest
  #   needs: [Analysis]
  #   #if: (startsWith(github.ref, 'refs/heads/release') && endsWith(github.ref, '0')) == true
  #   steps:
  #     - name: check
  #       run: |
  #         echo test
  #         # ls src/bin/script.py
  
  # check_1:
  #   runs-on: ubuntu-latest
  #   needs: [Analysis, check]
  #   #if: (startsWith(github.ref, 'refs/heads/release') && endsWith(github.ref, '0')) == true
  #   steps:
  #     - name: check
  #       run: |
  #         echo test
  #         # ls src/bin/script.py
  
  # list-jobs:
  #   runs-on: ubuntu-latest
  #   needs: [Analysis, check, check_1]
  #   steps:
  #     - uses: ./sonarqube.yml
  #       id: list-jobs
  #     - run: cat ${{ steps.list-jobs.outputs.jobs-file }}


  # Veracode:
  #   if: (startsWith(github.ref, 'refs/heads/release') && endsWith(github.ref, '0')) == false

  #   runs-on: ubuntu-latest
  #   needs: [Analysis,check, check_1,list-jobs]

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Veracode
  #       run: |
  #         sleep 20s
  #         #ls src/bin/script.py

  # docker:
  #   runs-on: ubuntu-latest
  #   needs: [Analysis, check, Veracode, check_1,list-jobs]
  #   #if: needs.Veracode.result != 'failure' || needs.veracode.result == 'success' || needs.veracode.result == 'skipped'
  #   if: always() && needs.Veracode.result != 'failure' && needs.check.result != 'failure' && needs.Analysis.result != 'failure' && needs.check_1.result != 'failure' && needs.check.result != 'skipped' && needs.Analysis.result != 'skipped' && needs.check_1.result != 'skipped'
  #   steps:
  #     - name: Docker Job
  #       run: |
  #         echo docker run
  #         echo 'needs.Veracode.result'

  # upload:
  #   runs-on: ubuntu-latest
  #   needs: [Analysis, check, check_1, docker, Veracode, list-jobs]
  #   #if: needs.Veracode.result != 'failure' || needs.veracode.result == 'success' || needs.veracode.result == 'skipped'
  #   if: always() && needs.Veracode.result != 'failure' && needs.docker.result != 'failure' && needs.check.result != 'failure' && needs.Analysis.result != 'failure' && needs.check_1.result != 'failure' && needs.docker.result != 'skipped' && needs.check.result != 'skipped' && needs.Analysis.result != 'skipped' && needs.check_1.result != 'skipped'
  #   steps:
  #     - name: Upload Job1
  #       if: (startsWith(github.ref, 'refs/heads/release') && endsWith(github.ref, '0')) == false
  #       run: |
  #         echo docker run
      
  #     - name: Upload Job2
  #       run: |
  #         echo docker run
      
  #     - name: Upload Job3
  #       run: |
  #         echo docker run
      
  #     - name: Upload Job4
  #       run: |
  #         echo docker run
  #         echo "${{needs.Veracode.result}}"
    
